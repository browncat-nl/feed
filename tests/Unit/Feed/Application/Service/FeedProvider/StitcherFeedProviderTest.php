<?php

namespace Unit\Feed\Application\Service\FeedProvider;

use App\Feed\Application\Service\FeedProvider\StitcherFeedProvider;
use DateTime;
use Dev\Common\Infrastructure\Logger\InMemoryLogger;
use PHPUnit\Framework\TestCase;
use Psr\Log\LoggerInterface;
use Psr\Log\LogLevel;
use Symfony\Component\HttpClient\MockHttpClient;
use Symfony\Component\HttpClient\Response\MockResponse;
use Symfony\Contracts\HttpClient\HttpClientInterface;

class StitcherFeedProviderTest extends TestCase
{
    private InMemoryLogger $logger;

    private const EXTERNAL_FEED = <<<XML
<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://www.stitcher.io/rss</id>
  <link href="https://www.stitcher.io/rss"/>
  <title><![CDATA[ stitcher.io ]]></title>
  <updated>2023-07-05T19:00:15+00:00</updated>
  <entry>
    <title><![CDATA[ PHP version stats: July, 2023 ]]></title>
    <link rel="alternate" href="https://stitcher.io/blog/php-version-stats-july-2023"/>
    <id>
    https://www.stitcher.io/blog/php-version-stats-july-2023
    </id>
    <author>
      <name><![CDATA[ Brent Roose ]]></name>
    </author>
    <summary type="html"><![CDATA[
    <p>Once again, I'm writing my summary of which PHP versions are used across the community. You can read the previous edition <a href="/blog/php-version-stats-january-2023">here</a>, but I'll also include historic data in this post.</p> <p>As always, it's important to note that I'm working with the data available to us. That means that these charts are not a 100% accurate representation of the PHP community as a whole, but they <em>are</em> an accurate representation of one of the most prominent parts of PHP: the <a href="https://packagist.org/php-statistics">packagist ecosystem</a>.</p> <p><div class="author packagist"> <img src="https://packagist.com/img/logo-right.svg" alt=""> <span> This blog post was sponsored by <a href="https://aggregate.stitcher.io/links/3c95f238-9205-4a25-a928-1a1a5405f133">Private Packagist</a> - the private Composer repository from the creators and maintainers of Composer & Packagist. </span> </div> </p> <h2 id="usage-statistics"><a href="#usage-statistics" class="heading-anchor">#</a> Usage Statistics</h2> <p>Let's start with the percentage of PHP versions being used today, and compare it to the previous three editions, note that I've omitted all versions that don't have more than 1% usage:</p> <div class="table-container"> <table> <tr class="table-head"> <td>Version</td> <td>2022-01</td> <td>2022-07</td> <td>2023-01</td> <td>2023-07</td> </tr> <tr> <td>7.1</td> <td>2.4%</td> <td>1.9%</td> <td>1.8%</td> <td>1.3%</td> </tr> <tr> <td>7.2</td> <td>6.6%</td> <td>5.1%</td> <td>4.3%</td> <td>4.3%</td> </tr> <tr> <td>7.3</td> <td>12.0%</td> <td>8.0%</td> <td>5.3%</td> <td>4.2%</td> </tr> <tr> <td>7.4</td> <td>43.9%</td> <td>38.4%</td> <td>27.7%</td> <td>19.9%</td> </tr> <tr> <td>8.0</td> <td>23.9%</td> <td>20.6%</td> <td>16.2%</td> <td>12.3%</td> </tr> <tr> <td>8.1</td> <td>9.1%</td> <td>24.5%</td> <td>38.8%</td> <td>39.3%</td> </tr> <tr> <td>8.2</td> <td>0.0%</td> <td>0.0%</td> <td>4.7%</td> <td>17.2%</td> </tr> </table> </div> <p>Visualizing this data looks like this:</p> <div class="image-noborder image-wide"></div> <p><a href="/resources/img/blog/version-stats/2023-jul-01.svg"><img src="/resources/img/blog/version-stats/2023-jul-01.svg" srcset="" sizes="" alt=""></img></a></p> <p><em class="center small"><a href="/resources/img/blog/version-stats/2023-jul-01.svg">Evolution of version usage</a></em></p> <p>It's important to know which PHP versions are currently still supported: PHP 8.2 and PHP 8.1 are still receiving updates. PHP 8.0 is still getting security updates until the end of November, this year. That means that PHP 7.4 and below don't receive any updates more, and should be considered end of life.</p> <p>In total, <strong>that's around 30% of packagist downloads by outdated and insecure version of PHP</strong>. At the beginning of this year, that number was closer to 40%, meaning we see a steady decline ‚Äî a good thing!</p> <p><div class="sidenote"> <div class="center"> <a href="https://www.youtube.com/watch?v=lXsbFXYwxWU" target="_blank" rel="noopener noreferrer"> <img class="small hover-outline" src="/resources/img/static/multi-inheritance.png" alt="PHP in 2023"> <p><em class="center small">Interface Default Methods</em></p> </a> </div> </div> </p> <p>Moving on to the all-time overview chart, here you can see the evolution of version usage across time:</p> <div class="image-noborder image-wide"></div> <p><a href="/resources/img/blog/version-stats/2023-jul-02.svg"><img src="/resources/img/blog/version-stats/2023-jul-02.svg" srcset="" sizes="" alt=""></img></a></p> <p><em class="center small"><a href="/resources/img/blog/version-stats/2023-jul-02.svg">All time evolution</a></em></p> <p>It seems that <strong>PHP 8.1 saw the biggest growth over time since PHP 7.4 and PHP 5.5</strong>. PHP 8.2, in comparison, seems to make a slower start. It's also interesting to note a relative high percentage of PHP 8.1 two years in a row. Granted, PHP 8.1 was a pretty solid release with <a href="/blog/new-in-php-81">features like enums and readonly properties</a>. It'll be interesting to see how this graph evolves next year, when PHP 8.1 moves in security fixes only mode.</p> <p><div class="author packagist"> <img src="https://packagist.com/img/logo-right.svg" alt=""> <span> This blog post was sponsored by <a href="https://aggregate.stitcher.io/links/3c95f238-9205-4a25-a928-1a1a5405f133">Private Packagist</a> - the private Composer repository from the creators and maintainers of Composer & Packagist. </span> </div> </p> <h2 id="required-versions"><a href="#required-versions" class="heading-anchor">#</a> Required versions</h2> <p>Next, I used Nikita's <a target="_blank" href="https://github.com/nikic/popular-package-analysis">popular package analyzer</a> to download the 1000 most popular composer packages. I wrote a script that scans these packages to determine their minimum required version. Here are the results:</p> <div class="table-container"> <table> <tr class="table-head"> <td>Version</td> <td>2022-01</td> <td>2022-07</td> <td>2023-01</td> <td>2023-07</td> </tr> <tr> <td>5.2</td> <td>10</td> <td>10</td> <td>10</td> <td>7</td> </tr> <tr> <td>5.3</td> <td>83</td> <td>77</td> <td>78</td> <td>65</td> </tr> <tr> <td>5.4</td> <td>43</td> <td>40</td> <td>40</td> <td>31</td> </tr> <tr> <td>5.5</td> <td>42</td> <td>35</td> <td>37</td> <td>21</td> </tr> <tr> <td>5.6</td> <td>49</td> <td>42</td> <td>43</td> <td>32</td> </tr> <tr> <td>7.0</td> <td>29</td> <td>29</td> <td>30</td> <td>24</td> </tr> <tr> <td>7.1</td> <td>190</td> <td>153</td> <td>159</td> <td>125</td> </tr> <tr> <td>7.2</td> <td>133</td> <td>130</td> <td>144</td> <td>133</td> </tr> <tr> <td>7.3</td> <td>116</td> <td>104</td> <td>106</td> <td>56</td> </tr> <tr> <td>7.4</td> <td>69</td> <td>86</td> <td>98</td> <td>97</td> </tr> <tr> <td>8.0</td> <td>160</td> <td>94</td> <td>103</td> <td>144</td> </tr> <tr> <td>8.1</td> <td>-</td> <td>125</td> <td>129</td> <td>107</td> </tr> <tr> <td>8.2</td> <td>-</td> <td>-</td> <td>-</td> <td>94</td> </tr> </table> </div> <p>There are two important notes to make here.</p> <ol> <li>This tables shows the <strong>minimum required version</strong>. That means that packages with a minimal version of, for example, 8.0, could also support PHP 8.1 or and PHP 8.2.</li> <li>If you count the numbers, you'll notice there are some differences between each year. Not every package lists a valid version string.</li> </ol> <br> <p>Instead of comparing absolute numbers, it's best to plot this data into a chart for a relative comparison, so that we can see changes over time:</p> <div class="image-noborder image-wide"></div> <p><a href="/resources/img/blog/version-stats/2023-jul-03.svg"><img src="/resources/img/blog/version-stats/2023-jul-03.svg" srcset="" sizes="" alt=""></img></a></p> <p><em class="center small"><a href="/resources/img/blog/version-stats/2023-jul-03.svg">Minimal PHP requirement over time</a></em></p> <p>There seems to be <strong>a pretty big leap in PHP 8.0 and PHP 8.1 being the minimal versions</strong> ‚Äî a good thing. After all, the open source community plays a big part in pushing the community forward by increasing their minimal required version.</p> <hr /> <p>That's all data I have to share for this edition of PHP's version stats. You can always reach me via <a href="mailto:brendt@stitcher.io">email</a> if you want to share your thoughts or have questions. You can also <a href="/mail">subscribe to my newsletter</a> if you want to receive updates about this blog in the future.</p> <p><div class="like-container"> <div class="like placeholder"> üëç </div> <div class="like unliked hidden"> üëç </div> <div class="like liked hidden"> üëç <span class="counter">0</span> </div> </div> </p> <p><div class="author"> Noticed a tpyo? You can <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">submit a PR</a> to fix it. If you want to stay up to date about what's happening on this blog, you can follow me on <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">Twitter</a> or subscribe to my newsletter: <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form"> <label for="newsletter-email-4">Email</label> <input type="email" name="email" id="newsletter-email-4"/> <button type="submit" class="cta cta-small">Subscribe</button> </form> </div> </p>
    ]]></summary>
    <updated>2023-07-01T00:00:00+00:00</updated>
  </entry>
  <entry>
    <title><![CDATA[ What&#039;s new in PHP 8.3 ]]></title>
    <link rel="alternate" href="https://stitcher.io/blog/new-in-php-83"/>
    <id>https://www.stitcher.io/blog/new-in-php-83</id>
    <author>
      <name><![CDATA[ Brent Roose ]]></name>
    </author>
    <summary type="html"><![CDATA[
    <div class="sidenote"> <p><strong>PHP 8.3 will be released on <a href="https://wiki.php.net/todo/php83">November 23, 2023</a></strong>; it has improvements to readonly classes, the new <code><span class="hljs-highlight prop">json_validate</span>()</code> function, additions to the recently added <code><span class="hljs-highlight type">Randomizer</span></code> class, stack overflow detection, and more.</p> <p>In this post, we'll go through all features, performance improvements, changes and deprecations one by one. If you want to stay up to date, you can <a href="/mail">subscribe to my newsletter</a>, <a href="/twitter">follow me on Twitter</a>, or <a href="/rss">subscribe to my RSS feed</a>.</p> </div> <p><div class="ad-container"> <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CK7ICK3W&placement=stitcherio" id="_carbonads_js"></script> </div></p> <h3 id="readonly-amendments-rfc"><a href="#readonly-amendments-rfc" class="heading-anchor">#</a> Readonly amendments <small><a target="_blank" href="https://wiki.php.net/rfc/readonly_amendments">RFC</a></small></h3> <p>This RFC proposed two changes, only one was accepted: being able to reinitialize readonly properties while cloning. That might sound like a very big deal, but this RFC only addresses a very specific (but important) edge case: overwriting property values within <code><span class="hljs-highlight prop">__clone</span>()</code>, in order to allow deep cloning readonly properties.</p> <pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight keyword">readonly</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span> </span>{ <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">( <span class="hljs-highlight keyword">public</span> <span class="hljs-highlight type">DateTime</span> <span class="hljs-highlight prop">\$createdAt</span>, )</span> </span>{} <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span><span class="hljs-params">()</span> </span>{ <span class="hljs-keyword">\$this</span>-&gt;<span class="hljs-highlight prop">createdAt</span> = <span class="hljs-keyword">new</span> <span class="hljs-highlight type">DateTime</span>(); <span class="hljs-comment">// This is allowed,</span> <span class="hljs-comment">// even though `createdAt` is a readonly property.</span> } }</code></pre> <p>You can read an in-depth post about this RFC and some sidenotes <a href="/blog/cloning-readonly-properties-in-php-83">here</a>.</p> <hr /> <h3 id="typed-class-constants-rfc"><a href="#typed-class-constants-rfc" class="heading-anchor">#</a> Typed class constants <small><a target="_blank" href="https://wiki.php.net/rfc/typed_class_constants">RFC</a></small></h3> <p>You can now typehint class constants:</p> <pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>{ <span class="hljs-keyword">const</span> <span class="hljs-highlight type">string</span> <span class="hljs-highlight prop">BAR</span> = <span class="hljs-string">'baz'</span>; } </code></pre> <hr /> <h3 id="#[override]-attribute-rfc"><a href="##[override]-attribute-rfc" class="heading-anchor">#</a> <code>#[<span class="hljs-highlight type">Override</span>]</code> attribute <small><a target="_blank" href="https://wiki.php.net/rfc/marking_overriden_methods">RFC</a></small></h3> <p>The new <code>#[<span class="hljs-highlight type">Override</span>]</code> attribute is used to show a programmer's intent. It basically says "I know this method is overriding a parent method. If that would ever change, please let me know".</p> <p>Here's an example:</p> <pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span> </span>{ <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">methodWithDefaultImplementation</span><span class="hljs-params">()</span>: <span class="hljs-title">int</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; } } <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Parent</span> </span>{ <span class="hljs-comment">#[<span class="hljs-highlight type">Override</span>]</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">methodWithDefaultImplementation</span><span class="hljs-params">()</span>: <span class="hljs-title">void</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>; <span class="hljs-comment">// The overridden method</span> } } </code></pre> <p>Now, let's imagine at one point the parent method changes its method name:</p> <pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span> </span>{ <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">methodWithNewImplementation</span><span class="hljs-params">()</span>: <span class="hljs-title">int</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; } }</code></pre> <p>Thanks to the <code>#[<span class="hljs-highlight type">Override</span>]</code> attribute, PHP will be able to detect that <code><span class="hljs-highlight type">Child</span>::<span class="hljs-highlight prop">methodWithDefaultImplementation</span>()</code> doesn't override anything anymore, and it will throw an error.</p> <p>You can <a href="/blog/override-in-php-83">read more about the <code>#[<span class="hljs-highlight type">Override</span>]</code> attribute here</a>.</p> <hr /> <h2 id="negative-indices-in-arrays-breaking"><a href="#negative-indices-in-arrays-breaking" class="heading-anchor">#</a> Negative indices in arrays <small class="breaking"><a href="https://github.com/php/php-src/blob/master/UPGRADING#L19">breaking</a></small></h2> <p>If you have an empty array, add an item with a <em>negative</em> index, and then add another item, that second item would always start at index <code>0</code>:</p> <pre><code class="language-php hljs php" data-lang="php">\$array = []; \$array[<span class="hljs-number">-5</span>] = <span class="hljs-string">'a'</span>; \$array[] = <span class="hljs-string">'b'</span>; var_export(\$array); <span class="hljs-comment">//array (</span> <span class="hljs-comment">// -5 =&gt; 'a',</span> <span class="hljs-comment">// 0 =&gt; 'b',</span> <span class="hljs-comment">//)</span></code></pre> <p>Starting from PHP 8.3, the next item will be added at index <code>-4</code>:</p> <pre><code class="language-php hljs php" data-lang="php"><span class="hljs-comment">//array (</span> <span class="hljs-comment">// -5 =&gt; 'a',</span> <span class="hljs-comment">// -4 =&gt; 'b',</span> <span class="hljs-comment">//)</span></code></pre> <hr /> <h3 id="anonymous-readonly-classes-upgrading"><a href="#anonymous-readonly-classes-upgrading" class="heading-anchor">#</a> Anonymous readonly classes <small><a target="_blank" href="https://github.com/php/php-src/blob/master/UPGRADING#L48">UPGRADING</a></small></h3> <p>Previously, you weren't able to mark anonymous classes as readonly. That's fixed in PHP 8.3:</p> <pre><code class="language-php hljs php" data-lang="php">\$class = <span class="hljs-keyword">new</span> <span class="hljs-highlight keyword">readonly</span> <span class="hljs-class"><span class="hljs-keyword">class</span> </span>{ <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">( <span class="hljs-highlight keyword">public</span> <span class="hljs-highlight type">string</span> <span class="hljs-highlight prop">\$foo</span> = <span class="hljs-string">'bar'</span>, )</span> </span>{} };</code></pre> <hr /> <h3 id="the-new-json_validate()-function-rfc"><a href="#the-new-json_validate()-function-rfc" class="heading-anchor">#</a> The new <code><span class="hljs-highlight prop">json_validate</span>()</code> function <small><a target="_blank" href="https://wiki.php.net/rfc/json_validate">RFC</a></small></h3> <p>Previously, the only way to validate whether a string was valid JSON, was to decode it and detect whether any errors were thrown. This new <code><span class="hljs-highlight prop">json_validate</span>()</code> function is beneficial if you only need to know whether the input is valid JSON, since it uses less memory compared to decoding the string.</p> <pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight prop">json_validate</span>(<span class="hljs-highlight type">string</span> \$json, <span class="hljs-highlight type">int</span> \$depth = <span class="hljs-number">512</span>, <span class="hljs-highlight type">int</span> \$flags = <span class="hljs-number">0</span>): <span class="hljs-highlight type">bool</span></code></pre> <hr /> <h3 id="randomizer-additions-rfc"><a href="#randomizer-additions-rfc" class="heading-anchor">#</a> <code><span class="hljs-highlight type">Randomizer</span></code> additions <small><a target="_blank" href="https://wiki.php.net/rfc/randomizer_additions">RFC</a></small></h3> <p>PHP 8.2 added the new <a href="/blog/new-in-php-82#new-random-extension-rfc">Randomizer</a> class. This update brings some small additions:</p> <pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight type">Randomizer</span>::<span class="hljs-highlight prop">getBytesFromString</span>(<span class="hljs-highlight type">string</span> \$string, <span class="hljs-highlight type">int</span> \$length): <span class="hljs-highlight type">string</span></code></pre> <p>This method allows you to generate a string with a given length that consists of randomly selected bytes from a given string.</p> <pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight type">Randomizer</span>::<span class="hljs-highlight prop">getFloat</span>( <span class="hljs-highlight type">float</span> \$min, <span class="hljs-highlight type">float</span> \$max, <span class="hljs-highlight type">IntervalBoundary</span> \$boundary = <span class="hljs-highlight type">IntervalBoundary</span>::<span class="hljs-highlight prop">ClosedOpen</span> ): <span class="hljs-highlight type">float</span></code></pre> <p><code><span class="hljs-highlight prop">getFloat</span>()</code> returns a float between <code>\$min</code> and <code>\$max</code>. You can define whether <code>\$min</code> and <code>\$max</code> should be included thanks to the <code><span class="hljs-highlight type">IntervalBoundary</span></code> enum. <code><span class="hljs-highlight prop">Closed</span></code> means the value is included, while <code><span class="hljs-highlight prop">Open</span></code> means excluded.</p> <pre><code class="language-php hljs php" data-lang="php"><span class="hljs-highlight type">Randomizer</span>::<span class="hljs-highlight prop">nextFloat</span>(): <span class="hljs-highlight type">float</span> {}</code></pre> <p>Finally, <code><span class="hljs-highlight prop">nextFloat</span>()</code> is a shorthand for <code><span class="hljs-highlight prop">getFloat</span>(0, 1, <span class="hljs-highlight type">IntervalBoundary</span>::<span class="hljs-highlight prop">ClosedOpen</span>)</code>, in other words: it'll give you a random float between 0 and 1, where 1 is excluded.</p> <hr /> <h3 id="dynamic-class-constant-fetch-rfc"><a href="#dynamic-class-constant-fetch-rfc" class="heading-anchor">#</a> Dynamic class constant fetch <small><a target="_blank" href="https://wiki.php.net/rfc/dynamic_class_constant_fetch">RFC</a></small></h3> <p>PHP 8.3 allows you to fetch constants with a more dynamic syntax:</p> <pre><code class="language-php hljs php" data-lang="php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>{ <span class="hljs-keyword">const</span> <span class="hljs-highlight prop">BAR</span> = <span class="hljs-string">'bar'</span>; } \$name = <span class="hljs-string">'BAR'</span>; <span class="hljs-comment">// Instead of this:</span> <span class="hljs-highlight prop">constant</span>(<span class="hljs-highlight type">Foo</span>::class . <span class="hljs-string">'::'</span> . \$name); <span class="hljs-comment">// You can now do this:</span> <span class="hljs-highlight type">Foo</span>::{\$name};</code></pre> <hr /> <h3 id="more-appropriate-date/time-exceptions-rfc-breaking"><a href="#more-appropriate-date/time-exceptions-rfc-breaking" class="heading-anchor">#</a> More Appropriate Date/Time Exceptions <small><a target="_blank" href="https://wiki.php.net/rfc/datetime-exceptions">RFC</a></small> <small class="breaking"><a href="https://wiki.php.net/rfc/datetime-exceptions#backward_incompatible_changes">breaking</a></small></h3> <p>In many cases, PHP would simply throw an <code><span class="hljs-highlight type">Exception</span></code> or <code><span class="hljs-highlight type">Error</span></code> object; or emit a warning or error when something went wrong in dealing with dates and times. This RFC goes through all those edge cases and adds proper, dedicated exceptions for them.</p> <p>We now have exceptions like <code><span class="hljs-highlight type">DateMalformedIntervalStringException</span></code>, <code><span class="hljs-highlight type">DateInvalidOperationException</span></code>, and <code><span class="hljs-highlight type">DateRangeError</span></code>.</p> <p>In general, these additions won't break any code, since these newly added exceptions and errors subclass the generic <code><span class="hljs-highlight type">Exception</span></code> and <code><span class="hljs-highlight type">Error</span></code> classes. However, there are three small breaking changes that come with this RFC:</p> <ul> <li>The <code>Epoch doesn't fit in a PHP integer</code> now returns a new <code><span class="hljs-highlight type">DateRangeError</span></code> instead of a generic <code><span class="hljs-highlight type">ValueError</span></code>, which it does not subclass. This is only an issue for 32-bit platforms.</li> <li>The <code>Only non-special relative time specifications are supported for subtraction</code> warning with <code><span class="hljs-highlight type">DateTime</span>::<span class="hljs-highlight prop">sub</span>()</code> and <code><span class="hljs-highlight prop">date_sub</span>()</code> becomes a new <code><span class="hljs-highlight type">DateInvalidOperationException</span></code>.</li> <li>The <code>Unknown or bad format (%s) at position %d (%c): %s</code> and <code>String '%s' contains non-relative elements</code> warnings that are created while parsing wrong/broken <code><span class="hljs-highlight type">DateInterval</span></code> strings will now throw a new <code><span class="hljs-highlight type">DateMalformedIntervalStringException</span></code> when used with the OO interface, instead of showing a warning and returning false.</li> </ul> <hr /> <h3 id="improved-unserialize()-error-handling-rfc"><a href="#improved-unserialize()-error-handling-rfc" class="heading-anchor">#</a> Improved <code><span class="hljs-highlight prop">unserialize</span>()</code> error handling <small><a target="_blank" href="https://wiki.php.net/rfc/improve_unserialize_error_handling">RFC</a></small></h3> <p><code><span class="hljs-highlight prop">unserialize</span>()</code> will now always emit a <code><span class="hljs-highlight prop">E_WARNING</span></code> when running into problems instead of sometimes an <code><span class="hljs-highlight prop">E_NOTICE</span></code>.</p> <p>This RFC also proposed adding more exceptions when running <code><span class="hljs-highlight prop">unserialize</span>()</code>, but that part didn't get accepted.</p> <hr /> <h3 id="changes-to-the-range()-function-breaking"><a href="#changes-to-the-range()-function-breaking" class="heading-anchor">#</a> Changes to the <code><span class="hljs-highlight prop">range</span>()</code> function <small class="breaking"><a href="https://github.com/php/php-src/blob/master/UPGRADING#L19">breaking</a></small></h3> <p>From the changelog:</p> <ul> <li>A <code><span class="hljs-highlight type">TypeError</span></code> is now thrown when passing objects, resources, or arrays as the boundary inputs</li> <li>A more descriptive <code><span class="hljs-highlight type">ValueError</span></code> is thrown when passing 0 for <code>\$step</code> </li> <li>A <code><span class="hljs-highlight type">ValueError</span></code> is now thrown when using a negative <code>\$step</code> for increasing ranges</li> <li>If <code>\$step</code> is a float that can be interpreted as an int, it is now done so</li> <li>A <code><span class="hljs-highlight type">ValueError</span></code> is now thrown if any argument is <code>infinity</code> or <code>NAN</code> </li> <li>An <code><span class="hljs-highlight prop">E_WARNING</span></code> is now emitted if <code>\$start</code> or <code>\$end</code> is the empty string. The value continues to be cast to the value 0.</li> <li>An <code><span class="hljs-highlight prop">E_WARNING</span></code> is now emitted if <code>\$start</code> or <code>\$end</code> has more than one byte, only if it is a non-numeric string.</li> <li>An <code><span class="hljs-highlight prop">E_WARNING</span></code> is now emitted if <code>\$start</code> or <code>\$end</code> is cast to an integer because the other boundary input is a number. (e.g. <code><span class="hljs-highlight prop">range</span>(5, 'z');</code>)</li> <li>An <code><span class="hljs-highlight prop">E_WARNING</span></code> is now emitted if \$step is a float when trying to generate a range of characters, except if both boundary inputs are numeric strings (e.g. <code><span class="hljs-highlight prop">range</span>('5', '9', 0.5);</code> does not produce a warning)</li> <li> <code><span class="hljs-highlight prop">range</span>()</code> now produce a list of characters if one of the boundary inputs is a string digit instead of casting the other input to int (e.g. <code><span class="hljs-highlight prop">range</span>('5', 'z');</code>)</li> </ul> <hr /> <h3 id="traits-and-static-properties-breaking"><a href="#traits-and-static-properties-breaking" class="heading-anchor">#</a> Traits and static properties <small class="breaking"><a href="https://github.com/php/php-src/blob/master/UPGRADING#L19">breaking</a></small></h3> <p>From the changelog:</p> <blockquote> <p>Uses of traits with static properties will now redeclare static properties inherited from the parent class. This will create a separate static property storage for the current class. This is analogous to adding the static property to the class directly without traits.</p> </blockquote> <hr /> <h3 id="stack-overflow-detection-pr"><a href="#stack-overflow-detection-pr" class="heading-anchor">#</a> Stack overflow detection <small><a target="_blank" href="https://github.com/php/php-src/pull/9104">PR</a></small></h3> <p>PHP 8.3 adds two new ini directives called <code><span class="hljs-highlight prop">zend.max_allowed_stack_size</span></code> and <code><span class="hljs-highlight prop">zend.reserved_stack_size</span></code>. Programs that are close to overflowing the call stack may now throw an <hljs type>Error</hljs> when using more than the difference between <code><span class="hljs-highlight prop">zend.max_allowed_stack_size</span></code> and <code><span class="hljs-highlight prop">zend.reserved_stack_size</span></code>.</p> <p>The benefit of this feature is that stack-overflow-induced segmentation faults won't result in segfaults anymore, making debugging a lot easier.</p> <p>The default for <code><span class="hljs-highlight prop">zend.max_allowed_stack_size</span></code> is <code>0</code>, meaning PHP will automatically determine a value. You can also provide <code>-1</code> to indicate there isn't a limit, or a specific number of bytes. The <code><span class="hljs-highlight prop">zend.reserved_stack_size</span></code> directive is used to determine the "buffer zone", so that PHP is able to still throw an error instead of actually running out of memory. The value here should be a number of bytes, but PHP will determine a reasonable default for you, so you don't necessarily need to set it, unless you're running into edge cases for specific programs.</p> <p>On a final note, for fibers, the existing <code><span class="hljs-highlight prop">fiber.stack_size</span></code> directive is used as the max allowed stack size.</p> <pre><code class="language-ini hljs ini" data-lang="ini"><span class="hljs-highlight prop">zend.max_allowed_stack_size</span>=128K</code></pre> <hr /> <h3 id="small,-but-notable-changes"><a href="#small,-but-notable-changes" class="heading-anchor">#</a> Small, but notable changes</h3> <p>Not every change in PHP passes the RFC process. In fact, the majority of changes include maintenance and bugfixing, and don't require an RFC. All of these changes are listed in the <a href="https://github.com/php/php-src/blob/master/UPGRADING">UPGRADING</a> document. I'll list some of the most prominent ones, but you should definitely read throughout the whole list if you want to know about the tiniest details.</p> <ul> <li>When using <a href="/blog/new-in-php-74#foreign-function-interface-rfc">FFI</a>, C functions that have a return type of <code><span class="hljs-highlight type">void</span></code> now return <code><span class="hljs-highlight keyword">null</span></code> instead of returning <code><span class="hljs-highlight type">FFI\CData</span>:<span class="hljs-highlight prop">void</span></code> </li> <li> <code><span class="hljs-highlight prop">posix_getrlimit</span>()</code> now takes an optional <code>\$res</code> parameter to allow fetching a single resource limit.</li> <li> <code><span class="hljs-highlight prop">gc_status</span>()</code> has four new fields: <code>running</code>, <code>protected</code>, <code>full</code>, and <code>buffer_size</code>.</li> <li> <code><span class="hljs-highlight prop">class_alias</span>()</code> now supports creating an alias of an internal class.</li> <li> <code><span class="hljs-highlight prop">mysqli_poll</span>()</code> now raises a <code><span class="hljs-highlight type">ValueError</span></code> when the read nor error arguments are passed.</li> <li> <code><span class="hljs-highlight prop">array_pad</span>()</code> is now only limited by the maximum number of elements an array can have. Before, it was only possible to add at most 1048576 elements at a time.</li> <li>New posix functions: <code><span class="hljs-highlight prop">posix_sysconf</span>()</code>, <code><span class="hljs-highlight prop">posix_pathconf</span>()</code>, <code><span class="hljs-highlight prop">posix_fpathconf</span>()</code>, and <code><span class="hljs-highlight prop">posix_eaccess</span>()</code> </li> <li>Executing <code><span class="hljs-highlight prop">proc_get_status</span>()</code> multiple times will now always return the right value on posix systems.</li> </ul> <hr /> <p>That's it for now, but this list will grow over time. If you want to stay up to date, you can <a href="/mail">subscribe to my newsletter</a>, <a href="/twitter">follow me on Twitter</a>, or <a href="/rss">subscribe to my RSS feed</a>.</p>
    ]]></summary>
    <updated>2023-06-21T00:00:00+00:00</updated>
  </entry>
  <entry>
    <title><![CDATA[ #[Override] in PHP 8.3 ]]></title>
    <link rel="alternate" href="https://stitcher.io/blog/override-in-php-83"/>
    <id>https://www.stitcher.io/blog/override-in-php-83</id>
    <author>
      <name><![CDATA[ Brent Roose ]]></name>
    </author>
    <summary type="html"><![CDATA[
    <p>There's a new feature in PHP 8.3: the <code>#[<span class="hljs-highlight type">Override</span>]</code> attribute. It's a feature already known in other languages, but let me summarize in case you're unaware of what it does.</p> <p>Marking a method with the <code>#[<span class="hljs-highlight type">Override</span>]</code> attributes signifies that you <em>know</em> this method is overriding a parent method. So the only thing it does, is show intent.</p> <p>Why does that matter? You already know you're overriding a method, don't you? Well, let's imagine these two classes:</p> <pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span> </span>{ <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">methodWithDefaultImplementation</span><span class="hljs-params">()</span>: <span class="hljs-title">int</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; } } <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Parent</span> </span>{ <span class="hljs-comment">#[<span class="hljs-highlight type">Override</span>]</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">methodWithDefaultImplementation</span><span class="hljs-params">()</span>: <span class="hljs-title">int</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>; <span class="hljs-comment">// The overridden method</span> } } </code></pre> <p>Now, let's imagine at one point the parent method changes its method name:</p> <pre><code class="language-php hljs php" data-lang="php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span> </span>{ <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">methodWithNewImplementation</span><span class="hljs-params">()</span>: <span class="hljs-title">int</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; } }</code></pre> <p>Before the <code>#[<span class="hljs-highlight type">Override</span>]</code> attribute, there was no way of knowing that <code><span class="hljs-highlight type">Child</span>::<span class="hljs-highlight prop">methodWithDefaultImplementation</span>()</code> doesn't override the renamed method anymore, which could lead to unforeseen bugs.</p> <p>Thanks to <code>#[<span class="hljs-highlight type">Override</span>]</code> though, PHP now knows something is wrong, thanks to that attribute. It basically says "I know this method should override a parent method. If that would ever change, please let me know".</p> <h2 id="some-thoughts"><a href="#some-thoughts" class="heading-anchor">#</a> Some thoughts</h2> <p>What strikes me most about this RFC, is how irrelevant it could be. Once again we're adding runtime checks for something that could be determined by static analysers.</p> <p>I don't want to repeat every argument I made in the past, so I'll just <a href="/blog/we-dont-need-runtime-type-checks">link to my previous thoughts on the topic</a>, and summarise: we're missing out. PHP internals should either come with an official spec for static analysers, or with a first-party static analyser. Why? Because so much more would be possible, and it would drive PHP forward tremendously.</p> <p>Anyway, it seems like many people have tried to make the same argument about this RFC in particular <a href="https://externals.io/message/120233">on the Internals mailing list</a>, to no avail.</p> <p>I don't mind this feature, although I'll probably never use it myself (I use an IDE that prevents me from making these kinds of mistakes, I don't need PHP's runtime to double-check it for me). What I am sad about, is how the PHP community is <a href="/blog/thoughts-on-asymmetric-visibility">divided</a> between the static-analysis and non-static-analysis camps, and I don't know if there will ever be someone who'll be able to unify and steer the language into a next decade of progression.</p> <p><div class="author"> Noticed a tpyo? You can <a href="https://github.com/brendt/stitcher.io" target="_blank" rel="noopener noreferrer">submit a PR</a> to fix it. If you want to stay up to date about what's happening on this blog, you can follow me on <a href="https://mobile.twitter.com/brendt_gd" target="_blank" rel="noopener noreferrer">Twitter</a> or subscribe to my newsletter: <form action="https://mail.stitcher.io/subscribe/81fa83d0-4a0b-4eff-b897-f6ce51dfb7f0" method="post" class="newsletter-form"> <label for="newsletter-email-5">Email</label> <input type="email" name="email" id="newsletter-email-5"/> <button type="submit" class="cta cta-small">Subscribe</button> </form> </div> </p>
    ]]></summary>
    <updated>2023-06-21T00:00:00+00:00</updated>
  </entry>
</feed>
XML;

    private const MALFORMED_EXTERNAL_FEED = <<<XML
<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://www.stitcher.io/rss</id>
  <link href="https://www.stitcher.io/rss"/>
  <title><![CDATA[ stitcher.io ]]></title>
  <updated>2023-07-05T19:00:15+00:00</updated>
  <entry>
    <title><![CDATA[ PHP version stats: July, 2023 ]]></title>
    <link rel="alternate" href="https://stitcher.io/blog/php-version-stats-july-2023"/>
    <id>
    https://www.stitcher.io/blog/php-version-stats-july-2023
    </id>
    <author>
      <name><![CDATA[ Brent Roose ]]></name>
    </author>
    <updated>2023-07-01T00:00:00+00:00</updated>
  </entry>
</feed>
XML;

    protected function setUp(): void
    {
        $this->logger = new InMemoryLogger();

        parent::setUp();
    }

    /**
     * @test
     */
    public function it_should_fetch_the_external_feed(): void
    {
        // Arrange
        $client = new MockHttpClient([
            new MockResponse(self::EXTERNAL_FEED)
        ]);

        $feedProvider = new StitcherFeedProvider($client, $this->logger);

        // Act
        $feedItems = $feedProvider->fetchFeedItems();

        // Assert
        self::assertCount(3, $feedItems);

        self::assertSame("PHP version stats: July, 2023", $feedItems[0]->title);
        self::assertSame(
            "Once again, I'm writing my summary of which PHP versions are used across the community. You can read the previous edition here, but I'll also include historic data in this post.",
            $feedItems[0]->summary
        );
        self::assertSame("https://stitcher.io/blog/php-version-stats-july-2023", $feedItems[0]->url);
        self::assertEquals(new DateTime("2023-07-01 00:00:00.0 +00:00"), $feedItems[0]->updated);
        self::assertSame("stitcher.io", $feedItems[0]->source);

        self::assertSame("What's new in PHP 8.3", $feedItems[1]->title);
        self::assertSame(
            "PHP 8.3 will be released on November 23, 2023; it has improvements to readonly classes, the new json_validate() function, additions to the recently added Randomizer class, stack overflow detection, and more.",
            $feedItems[1]->summary
        );
        self::assertSame("https://stitcher.io/blog/new-in-php-83", $feedItems[1]->url);
        self::assertEquals(new DateTime("2023-06-21 00:00:00.0 +00:00"), $feedItems[1]->updated);
        self::assertSame("stitcher.io", $feedItems[1]->source);

        self::assertSame("#[Override] in PHP 8.3", $feedItems[2]->title);
        self::assertSame(
            "There's a new feature in PHP 8.3: the #[Override] attribute. It's a feature already known in other languages, but let me summarize in case you're unaware of what it does.",
            $feedItems[2]->summary
        );
        self::assertSame("https://stitcher.io/blog/override-in-php-83", $feedItems[2]->url);
        self::assertEquals(new DateTime("2023-06-21 00:00:00.0 +00:00"), $feedItems[2]->updated);
        self::assertSame("stitcher.io", $feedItems[2]->source);
    }

    /**
     * @test
     */
    public function it_should_get_the_source_name(): void
    {
        // Assert
        self::assertSame('stitcher.io', StitcherFeedProvider::getSource());
    }

    /**
     * @test
     */
    public function it_should_log_if_entry_cant_be_parsed(): void
    {
        // Arrange
        $client = new MockHttpClient([
            new MockResponse(self::MALFORMED_EXTERNAL_FEED)
        ]);

        $feedProvider = new StitcherFeedProvider($client, $this->logger);

        // Act
        $feedItems = $feedProvider->fetchFeedItems();

        // Assert
        self::assertCount(0, $feedItems);

        self::assertCount(1, $this->logger->recordedLogs);

        $log = $this->logger->recordedLogs[0];

        self::assertSame(LogLevel::WARNING, $log->level);
        self::assertSame('[{source}] Failed to parse entry: {reason}.', $log->message);
        self::assertSame([
            'source' => StitcherFeedProvider::getSource(),
            'reason' => "`summary` does not exist in DOMElement",
        ], $log->context);
    }
}
